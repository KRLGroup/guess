#! /usr/bin/env python
# coding: utf-8

import os
import numpy as np
import random
import matplotlib.pyplot as plt
import cv2 as cv
from threading import Thread, Lock

import rospy
import tf
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Vector3, PoseWithCovarianceStamped, PoseStamped
from sensor_msgs.msg import LaserScan
import scan_guesser_node.guesser_utils as sgu

class GuesserSaver:
    def __init__(self):
        r_id = rospy.get_param('~r_id', 'diag_floor_b1')
        pose_topic = rospy.get_param('~pose_topic', '/amcl_pose')
        cmd_vel_topic = rospy.get_param('~cmd_vel_topic', '/cmd_vel')
        scan_topic = rospy.get_param('~scan_topic', '/scan')
        sg_scan_topic = rospy.get_param('~sg_scan_topic', '/sg_scan')
        sv_scan_topic = rospy.get_param('~sv_scan_topic', '/sv_scan')
        self.scan_seq_sz = int(rospy.get_param('~scan_batch_sz', '8'))
        self.pred_step = int(rospy.get_param('~prediction_step', '10'))
        self.step = 0

        self.robot_position = np.zeros((1, 2)).astype(np.float32)
        self.p_path, _ = os.path.split(os.path.realpath(__file__))
        self.p_path = self.p_path + "/../../../../config/world/metrics/pplots/" + r_id + "/"
        #if not os.path.isdir(self.p_path): os.mkdir(self.p_path)

        self.collecting = False
        self.scan_beam_num = 512
        self.decoded_sequence = np.zeros((self.scan_seq_sz, self.scan_beam_num))
        self.generated_scan = np.zeros((1, self.scan_beam_num))
        self.scan_sequence = np.zeros((self.scan_seq_sz + 1, self.scan_beam_num))

        self.cmd_vel = np.zeros((6,), dtype=np.float32)
        self.tf_listener = tf.TransformListener()
        # self.pose_sub = rospy.Subscriber(pose_topic, PoseWithCovarianceStamped, self.poseCb)
        self.cmd_vel_sub = rospy.Subscriber(cmd_vel_topic, Twist, self.cmdVelCb)
        self.scan_sub = rospy.Subscriber(scan_topic, LaserScan, self.scanCb)
        # self.tf_sub = rospy.Subscriber(sg_scan_topic, LaserScan, self.scanSvCb)
        self.sg_scan_sub = rospy.Subscriber(sg_scan_topic, LaserScan, self.scanSgCb)
        self.sv_scan_sub = rospy.Subscriber(sv_scan_topic, LaserScan, self.scanSvCb)

    def setCollectingStatus(self, value):
        self.collecting = value

    def cmdVelCb(self, data):
        self.cmd_vel = np.array([data.linear.x, data.linear.y, data.linear.z,
                                 data.angular.x, data.angular.y, data.angular.z])

    def scanCb(self, data):
        irange = int(0.5*(len(data.ranges) - self.scan_beam_num))
        if self.step < self.scan_seq_sz:
            scan = data.ranges[irange:irange + self.scan_beam_num]
            self.scan_sequence[self.step, :] = scan
        self.step += 1

        if self.step == self.scan_seq_sz + self.pred_step:
            self.collecting = False

    def scanSvCb(self, data):
        print "scanSvCb", len(data.ranges)
        self.decoded_sequence[self.step, :] = data.ranges

    def scanSgCb(self, data):
        print "scanSgCb", len(data.ranges)

    def run(self):
        while self.collecting:
            print "step", self.step
        print "exited..."

if __name__ == "__main__":
    sgu.println('-- Saving guesser status...')
    rospy.init_node('guesser_saver')
    try:
        gs = GuesserSaver()
        gs.setCollectingStatus(True)
        gs.run()
    except rospy.ROSInterruptException: pass
