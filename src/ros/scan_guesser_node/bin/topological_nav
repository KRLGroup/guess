#! /usr/bin/env python
# coding: utf-8

import os
import numpy as np
import random
import matplotlib.pyplot as plt
import cv2 as cv
from threading import Thread, Lock

import rospy
import tf
import actionlib
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import Vector3, Pose, PoseWithCovarianceStamped, PoseStamped
from visualization_msgs.msg import Marker, MarkerArray
from move_base_msgs.msg import MoveBaseGoal, MoveBaseAction
from actionlib_msgs.msg import GoalStatusArray, GoalStatus
import scan_guesser_node.guesser_utils as sgu

class TopologicalNavigationNode:
    def __init__(self):
        map_name = rospy.get_param('~map_name', 'diag_floor_b1')
        map_topic = rospy.get_param('~map_topic', '/map')
        pose_topic = rospy.get_param('~pose_topic', '/amcl_pose')
        movebase_status_topic = rospy.get_param('~movebase_send_goal', '/move_base/status')
        topo_nodes = rospy.get_param('~topo_nodes_topic', '/topo_nodes')
        topo_nav_nodes = rospy.get_param('~topo_nav_topic', '/topo_nav_nodes')

        self.topo_nodes_pub = rospy.Publisher(topo_nodes, MarkerArray, queue_size=10)
        self.topo_nav_nodes_pub = rospy.Publisher(topo_nav_nodes, MarkerArray, queue_size=10)
        self.movebase_al = actionlib.SimpleActionClient("move_base", MoveBaseAction)

        self.nodes = None
        self.mtx = Lock()
        self.robot_position = np.zeros((1, 2)).astype(np.float32)
        self.store_path, _ = os.path.split(os.path.realpath(__file__))
        self.store_path = self.store_path + "/../../../../config/world/" + map_name + ".npy"

        if os.path.isfile(self.store_path):
            self.nodes = np.load(self.store_path)
            print "-- Loaded nodes #" + str(self.nodes.shape[0]) + " from", self.store_path

        self.movebase_status_sub = rospy.Subscriber(movebase_status_topic,
                                                    GoalStatusArray, self.movebaseStatusCb)
        self.pose_sub = rospy.Subscriber(pose_topic, PoseWithCovarianceStamped, self.poseCb)
        self.map_sub = rospy.Subscriber(map_topic, OccupancyGrid, self.mapCb)

    def __makeMarker(self, mid, x, y, mtype=Marker.SPHERE, scale=Vector3(0.5, 0.5, 0.5),
                     r_ch=0.17647058823, g_ch=0.5294117647, b_ch=0.80392156862):
        m = Marker()
        m.action = Marker.ADD
        m.header.frame_id = '/map'
        m.header.stamp = rospy.Time.now()
        m.ns = 'marker_test_%d' % mtype
        m.id = mid
        m.type = mtype
        m.scale = scale
        m.pose.orientation.y = 0
        m.pose.orientation.w = 1
        m.pose.position.x = x
        m.pose.position.y = y
        m.pose.position.z = 0.1
        m.color.r = r_ch;
        m.color.g = g_ch;
        m.color.b = b_ch;
        m.color.a = 0.8;
        return m

    def __publishTopoNodes(self):
        marker_array = MarkerArray()
        for n in range(self.nodes.shape[0]):
            m = self.__makeMarker(n, self.nodes[n, 0], self.nodes[n, 1])
            marker_array.markers.append(m)
        print "--", len(marker_array.markers), "nodes published"
        self.topo_nodes_pub.publish(marker_array)

    def __getClosestNode(self, position_xy):
        min_idx = 0
        for n in range(1, self.nodes.shape[0]):
            if abs(np.sum(np.linalg.norm(self.nodes[n] - position_xy))) < \
               abs(np.sum(np.linalg.norm(self.nodes[min_idx] - position_xy))): min_idx = n
        return min_idx, self.nodes[min_idx]

    def __getRndNode(self):
        nidx = random.randint(0, self.nodes.shape[0] - 1)
        return nidx, self.nodes[nidx]

    def __sendMBGoal(self, position_xy):
        movebase_goal = MoveBaseGoal()
        movebase_goal.target_pose.pose.position.x = position_xy[0]
        movebase_goal.target_pose.pose.position.y = position_xy[1]
        movebase_goal.target_pose.pose.orientation.w = 1.0
        movebase_goal.target_pose.header.frame_id = '/map'
        movebase_goal.target_pose.header.stamp = rospy.Time.now()

        self.movebase_al.wait_for_server()
        print "-- Movebase movebase_goal sent [", \
            movebase_goal.target_pose.pose.position.x, \
            movebase_goal.target_pose.pose.position.y, "]"
        self.movebase_al.send_goal(movebase_goal)
        # self.movebase_al.wait_for_result()

    def movebaseStatusCb(self, data):
        if self.nodes is None: return
        r_position_xy = np.zeros((1, 2)).astype(np.float32)
        self.mtx.acquire()
        r_position_xy = self.robot_position
        self.mtx.release()

        mb_send_goal = False
        if len(data.status_list) == 0: mb_send_goal = True
        else:
            mbg_status = data.status_list[-1].status
            mb_send_goal = (mbg_status == GoalStatus.SUCCEEDED
                            or mbg_status == GoalStatus.ABORTED
                            or mbg_status == GoalStatus.PREEMPTED) # GoalStatus.ACTIVE

        if not mb_send_goal: return
        _, rnd_node = self.__getRndNode()
        _, robot_node = self.__getClosestNode(r_position_xy)

        marker_array = MarkerArray()
        marker_array.markers.append(self.__makeMarker(0, rnd_node[0], rnd_node[1],
                                                      scale=Vector3(0.8, 0.8, 0.8),
                                                      r_ch=0.86274509803,
                                                      g_ch=0.07843137254,
                                                      b_ch=0.23529411764))
        marker_array.markers.append(self.__makeMarker(1, robot_node[0], robot_node[1],
                                                      scale=Vector3(0.6, 0.6, 0.6)))
        self.topo_nav_nodes_pub.publish(marker_array)
        self.__sendMBGoal(rnd_node)

    def poseCb(self, data):
        self.mtx.acquire()
        self.robot_position = np.array([data.pose.pose.position.x,
                                        data.pose.pose.position.y]).astype(np.float32)
        self.mtx.release()

    def mapCb(self, data):
        print "-- Map received"
        if not self.nodes is None:
            self.__publishTopoNodes()
            return

        img_w, img_h = data.info.width, data.info.height
        ref = np.zeros((img_h, img_w), dtype=np.uint8)

        for i in range(0, img_h):
            for j in range(0, img_w):
                point_val = data.data[(img_h - 1 - i)*img_w + j]
                if point_val == -1: ref[i, j] = 0
                elif point_val == 0: ref[i, j] = 255
                elif point_val == 100: ref[i, j] = 0

        blurr_scaling = 85
        bl = cv.GaussianBlur(ref, (blurr_scaling, blurr_scaling), -1, 0)

        sobelx = np.absolute(cv.Sobel(bl, cv.CV_16S, 1, 0, ksize=3))
        sobely = np.absolute(cv.Sobel(bl, cv.CV_16S, 0, 1, ksize=3))
        potential = sobelx + sobely
        potential = potential.astype(np.float32)/np.max(potential)
        potential[(ref == 0) | (potential > 0.3)] = 1.0

        print "-- Potetial field generated"
        nodes = []
        for i in range(potential.shape[0]):
            for j in range(potential.shape[1]):
                if potential[i, j] < 0.0001:
                    found = False
                    for n in range(len(nodes)):
                        if abs(np.sum(np.linalg.norm(nodes[n] - np.array([i, j])))) < 50:
                            found = True
                            break
                    if not found:
                        nodes.append([i, j])
        print "-- Added #" + str(len(nodes)), "navigation nodes"
        self.nodes = np.array(nodes).astype(np.float32)
        for n in range(self.nodes.shape[0]):
            px = self.nodes[n, 1]*data.info.resolution + data.info.origin.position.x
            py = (data.info.height - self.nodes[n, 0])*data.info.resolution + data.info.origin.position.y
            self.nodes[n, 0] = px
            self.nodes[n, 1] = py
        np.save(self.store_path, self.nodes)
        print "-- Topological nodes saved at", self.store_path
        self.__publishTopoNodes()

    def run(self):
        sgu.println("-- Spinning ROS node")
        rospy.spin()

if __name__ == '__main__':
    sgu.println('-- Starting Topological Navigation ROS node')
    rospy.init_node('topo_navigation')
    try:
        tnn = TopologicalNavigationNode()
        tnn.run()
    except rospy.ROSInterruptException: pass
